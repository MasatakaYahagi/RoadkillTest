{"ts":1353591079474,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"﻿using System.Web;\r\nusing System.Web.Mvc;\r\nusing System.Web.Routing;\r\nusing Roadkill.Core.Search;\r\nusing System;\r\nusing System.IO;\r\nusing Roadkill.Core.Files;\r\nusing StructureMap;\r\nusing Roadkill.Core.Domain;\r\nusing StructureMap.Pipeline;\r\nusing Roadkill.Core.Configuration;\r\nusing Roadkill.Core.Converters;\r\n\r\nnamespace Roadkill.Core\r\n{\r\n\t/// <summary>\r\n\t/// The entry point application (Global.asax) for Roadkill.\r\n\t/// </summary>\r\n\tpublic class RoadkillApplication : HttpApplication\r\n\t{\r\n\t\tprotected void Application_Start()\r\n\t\t{\r\n\t\t\tSetupIoC();\r\n\t\t\tAttachmentRouteHandler.Register();\r\n\t\t\tAreaRegistration.RegisterAllAreas();\r\n\t\t\tRegisterRoutes(RouteTable.Routes);\r\n\r\n\t\t\tControllerBuilder.Current.SetControllerFactory(new StructureMapControllerFactory());\r\n\t\t}\r\n\r\n\t\tpublic static void RegisterRoutes(RouteCollection routes)\r\n\t\t{\r\n\t\t\troutes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");\r\n\r\n\t\t\t// For the jQuery ajax file manager\r\n\t\t\troutes.MapLowercaseRoute(\r\n\t\t\t\t\"FileFolder\",\r\n\t\t\t\t\"Files/Folder/{dir}\",\r\n\t\t\t\tnew { controller = \"Files\", action = \"Folder\", dir = UrlParameter.Optional }\r\n\t\t\t);\r\n\r\n\t\t\t// The default way of getting to a page: \"/wiki/123/page-title\"\r\n\t\t\troutes.MapLowercaseRoute(\r\n\t\t\t\t\"Wiki\",\r\n\t\t\t\t\"Wiki/{id}/{title}\",\r\n\t\t\t\tnew { controller = \"Wiki\", action = \"Index\", title = UrlParameter.Optional }\r\n\t\t\t);\r\n\r\n\t\t\t// Don't lowercase pages that use Base64\r\n\t\t\troutes.MapRoute(\r\n\t\t\t\t\"Pages\",\r\n\t\t\t\t\"pages/byuser/{id}/{encoded}\",\r\n\t\t\t\tnew { controller = \"Pages\", action = \"ByUser\", title = UrlParameter.Optional }\r\n\t\t\t);\r\n\r\n\t\t\t// Default\r\n\t\t\troutes.MapLowercaseRoute(\r\n\t\t\t\t\"Default\", // Route name\r\n\t\t\t\t\"{controller}/{action}/{id}\", // URL with parameters\r\n\t\t\t\tnew { controller = \"Home\", action = \"Index\", id = UrlParameter.Optional } // Parameter defaults\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t/// <summary>\r\n\t\t/// Initializes the Structuremap IoC containers for the Services, Configuration and IRepository,\r\n\t\t/// and registering the defaults for each.\r\n\t\t/// </summary>\r\n\t\tpublic static void SetupIoC(IConfigurationContainer config = null, IRepository repository = null, IRoadkillContext context = null)\r\n\t\t{\r\n\t\t\tObjectFactory.Initialize(x =>\r\n\t\t\t{\r\n\t\t\t\tx.Scan(scanner =>\r\n\t\t\t\t{\r\n\t\t\t\t\tscanner.AddAllTypesOf<IConfigurationContainer>();\r\n\t\t\t\t\tscanner.AddAllTypesOf<ControllerBase>();\r\n\t\t\t\t\tscanner.AddAllTypesOf<ServiceBase>();\r\n\t\t\t\t\tscanner.AddAllTypesOf<IRoadkillContext>();\r\n\t\t\t\t\tscanner.AddAllTypesOf<IRepository>();\r\n\t\t\t\t\tscanner.AddAllTypesOf<MarkupConverter>();\r\n\t\t\t\t\tscanner.WithDefaultConventions();\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// The order of the calls is important as the default concrete types have a dependency order:\r\n\t\t\t\t// - Repository relies on RoadkillSettings\r\n\t\t\t\t// - Container relies on Repository\r\n\t\t\t\t// - Context relies on ServiceContainer\r\n\r\n\t\t\t\tif (config == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tx.For<IConfigurationContainer>().HybridHttpOrThreadLocalScoped().Use<RoadkillSettings>();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tx.For<IConfigurationContainer>().HybridHttpOrThreadLocalScoped().Use(config);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (repository == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tx.For<IRepository>().HybridHttpOrThreadLocalScoped().Use<NHibernateRepository>();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tx.For<IRepository>().HybridHttpOrThreadLocalScoped().Use(repository);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (context == null)\r\n\t\t\t\t{\r\n\t\t\t\t\tx.For<IRoadkillContext>().HybridHttpOrThreadLocalScoped().Use<RoadkillContext>();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tx.For<IRoadkillContext>().HybridHttpOrThreadLocalScoped().Use(context);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// TODO: load UserManager from config\r\n\t\t\t\tx.For<UserManager>().HybridHttpOrThreadLocalScoped().Use<SqlUserManager>();\r\n\t\t\t});\r\n\r\n\t\t\tObjectFactory.Configure(x =>\r\n\t\t\t{\r\n\t\t\t\tx.IncludeConfigurationFromConfigFile = true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":3698}]],"length":3698}
{"contributors":[],"silentsave":false,"ts":1353591595429,"patch":[[{"diffs":[[-1,"﻿"],[0,"usin"]],"start1":0,"start2":0,"length1":5,"length2":4},{"diffs":[[0,";\r\n\t\t}\r\n"],[1,"\t\t\r\n\t\tpublic static UserManager LoadFromType()\r\n\t\t{\r\n\t\t\t// Attempt to load the type\r\n\t\t\tType userManagerType = typeof(UserManager);\r\n\t\t\tType reflectedType = Type.GetType(RoadkillSettings.UserManagerType);\r\n\t\t\t\r\n\t\t\tif (reflectedType.IsSubclassOf(userManagerType))\r\n\t\t\t{\r\n\t\t\t\treturn (UserManager)reflectedType.Assembly.CreateInstance(reflectedType.FullName);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tthrow new SecurityException(null, \"The type {0} specified in the userManagerType web.config setting is not an instance of a UserManager class\", RoadkillSettings.UserManagerType);\r\n\t\t\t}\r\n\t\t}\r\n"],[0,"\t}\r\n}\r\n"]],"start1":3682,"start2":3682,"length1":15,"length2":589}]],"length":4271,"saved":false}
{"ts":1353591603906,"patch":[[{"diffs":[[0,"\tpublic "],[-1,"static "],[0,"UserMana"]],"start1":3695,"start2":3695,"length1":23,"length2":16}]],"length":4264,"saved":false}
{"ts":1353591646759,"patch":[[{"diffs":[[0,"romType("],[1,"string typeName"],[0,")\r\n\t\t{\r\n"]],"start1":3720,"start2":3720,"length1":16,"length2":31},{"diffs":[[0,"ype("],[-1,"RoadkillSettings.UserManagerTyp"],[1,"typeNam"],[0,"e);\r"]],"start1":3864,"start2":3864,"length1":39,"length2":15},{"diffs":[[0,"s\", "],[-1,"RoadkillSettings.UserManagerTyp"],[1,"typeNam"],[0,"e);\r"]],"start1":4197,"start2":4197,"length1":39,"length2":15}]],"length":4231,"saved":false}
{"ts":1353592023486,"patch":[[{"diffs":[[0," each.\r\n"],[1,"\t\t/// The configuration is only used for its ApplicationSettings object.\r\n"],[0,"\t\t/// </"]],"start1":1935,"start2":1935,"length1":16,"length2":90},{"diffs":[[0,"t);\r\n\t\t\t\t}\r\n"],[1,"\t\t\t\t\r\n\t\t\t\tstring userManagerTypeName = config.ApplicationSettings.UserManagerType;\r\n\t\t\t\tif (string.IsNullOrEmpty(userManagerTypeName))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (config.ApplicationSettings.UseWindowsAuthentication)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tx.For<UserManager>().HybridHttpOrThreadLocalScoped().Use<ActiveDirectoryUserManager>();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tx.For<UserManager>().HybridHttpOrThreadLocalScoped().Use<SqlUserManager>();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t"],[0,"\r\n\t\t\t\t// TOD"]],"start1":3514,"start2":3514,"length1":24,"length2":462}]],"length":4743,"saved":false}
{"ts":1353592057446,"patch":[[{"diffs":[[0,"\t\t\t\t"],[1,"else"],[0,"\r\n\t\t\t\t"],[-1,"// TODO: l"],[1,"{\r\n\t\t\t\t\t// L"],[0,"oad "]],"start1":3960,"start2":3960,"length1":24,"length2":30},{"diffs":[[0,"Manager "],[1,"type "],[0,"from con"]],"start1":3994,"start2":3994,"length1":16,"length2":21},{"diffs":[[0,"config\r\n"],[1,"\t"],[0,"\t\t\t\tx.Fo"]],"start1":4012,"start2":4012,"length1":16,"length2":17},{"diffs":[[0,"ed().Use"],[-1,"<SqlUserManager>();"],[1,"(LoadFromType(userManagerTypeName));\r\n\t\t\t\t}\r\n\t\t\t\t"],[0,"\r\n\t\t\t});"]],"start1":4073,"start2":4073,"length1":35,"length2":65}]],"length":4785,"saved":false}
{"ts":1353592297704,"patch":[[{"diffs":[[0,"erters;\r"],[1,"\nusing System.Reflection;\r"],[0,"\n\r\nnames"]],"start1":299,"start2":299,"length1":16,"length2":42}]],"length":4811,"saved":false}
