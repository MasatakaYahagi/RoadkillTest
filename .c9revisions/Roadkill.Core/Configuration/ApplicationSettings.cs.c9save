{"ts":1353591895773,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"ï»¿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web;\r\nusing System.Configuration;\r\nusing System.Web.Security;\r\nusing System.Web.Configuration;\r\nusing System.Reflection;\r\nusing System.IO;\r\nusing StructureMap;\r\n\r\nnamespace Roadkill.Core.Configuration\r\n{\r\n\tpublic class ApplicationSettings\r\n\t{\r\n\t\t/// <summary>\r\n\t\t/// The name of the role or Active Directory security group that users should belong to in order to create,edit,delete pages,\r\n\t\t/// manage users, manage site settings and use the admin tools.\r\n\t\t/// </summary>\r\n\t\tpublic string AdminRoleName { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// The path to the App data folder.\r\n\t\t/// </summary>\r\n\t\tpublic string AppDataPath { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// The folder where all uploads (typically image files) are saved to. This is taken from the web.config,\r\n\t\t/// if the setting uses \"~/\" then the path is translated into one that is relative to the site root, \r\n\t\t/// otherwise it is assumed to be an absolute file path.\r\n\t\t/// </summary>\r\n\t\tpublic string AttachmentsFolder { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// The route used for all attachment HTTP requests (currently non-user configurable). Should not contain a trailing slash.\r\n\t\t/// </summary>\r\n\t\tpublic string AttachmentsUrlPath { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// The route used for all attachment HTTP requests (currently non-user configurable), minus any starting \"/\".\r\n\t\t/// </summary>\r\n\t\tpublic string AttachmentsRoutePath { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t///  Indicates whether caching (currently NHibernate level 2 caching) is enabled.\r\n\t\t/// </summary>\r\n\t\tpublic bool CachedEnabled { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// Indicates whether textual content for pages is cached.\r\n\t\t/// </summary>\r\n\t\tpublic bool CacheText { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// The connection string to the Roadkill database.\r\n\t\t/// </summary>\r\n\t\tpublic string ConnectionString { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// The connection string name (held in the connection strings section of the config file) for the Roadkill database.\r\n\t\t/// </summary>\r\n\t\tpublic string ConnectionStringName { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// The file path for the custom tokens file.\r\n\t\t/// </summary>\r\n\t\tpublic string CustomTokensPath { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// The database type used as the backing store.\r\n\t\t/// </summary>\r\n\t\tpublic DatabaseType DatabaseType { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// The name of the role or Active Directory security group that users should belong to in order to create and edit pages.\r\n\t\t/// </summary>\r\n\t\tpublic string EditorRoleName { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// Whether errors in updating the lucene index throw exceptions or are just ignored.\r\n\t\t/// </summary>\r\n\t\tpublic bool IgnoreSearchIndexErrors { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// Whether the site is public, i.e. all pages are visible by default. This is optional in the web.config and the default is true.\r\n\t\t/// </summary>\r\n\t\tpublic bool IsPublicSite { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// Indicates whether the installation has been completed previously.\r\n\t\t/// </summary>\r\n\t\tpublic bool Installed { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// The connection string for Active Directory server if <see cref=\"UseWindowsAuthentication\"/> is true.\r\n\t\t/// This should start with LDAP:// in uppercase.\r\n\t\t/// </summary>\r\n\t\tpublic string LdapConnectionString { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// The username to authenticate against the Active Directory with, if <see cref=\"UseWindowsAuthentication\"/> is true.\r\n\t\t/// </summary>\r\n\t\tpublic string LdapUsername { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// The password to authenticate against the Active Directory with, if <see cref=\"UseWindowsAuthentication\"/> is true.\r\n\t\t/// </summary>\r\n\t\tpublic string LdapPassword { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// The number of characters each password should be.\r\n\t\t/// </summary>\r\n\t\tpublic int MinimumPasswordLength { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// Whether to scale images dynamically on the page, using Javascript, so they fit inside the main page container (400x400px).\r\n\t\t/// </summary>\r\n\t\tpublic bool ResizeImages { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// The type for the <see cref=\"UserManager\"/>. If the setting for this is blank\r\n\t\t/// in the web.config, then the <see cref=\"UseWindowsAuthentication\"/> is checked and if false\r\n\t\t/// a <see cref=\"SqlUserManager\"/> is created.\r\n\t\t/// </summary>\r\n\t\tpublic string UserManagerType { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// Gets a value indicating whether this windows authentication is being used.\r\n\t\t/// </summary>\r\n\t\tpublic bool UseWindowsAuthentication { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// The current Roadkill version.\r\n\t\t/// </summary>\r\n\t\tpublic string Version { get; set; }\r\n\r\n\t\t/// <summary>\r\n\t\t/// Loads the settings from the configuration file.\r\n\t\t/// </summary>\r\n\t\t/// <param name=\"config\">The configuration to load the settings from. If this is null, the <see cref=\"ConfigurationManager\"/> \r\n\t\t/// is used to load the settings.</param>\r\n\t\tpublic virtual void Load(System.Configuration.Configuration config = null)\r\n\t\t{\r\n\t\t\tRoadkillSection section;\r\n\r\n\t\t\tif (config == null)\r\n\t\t\t\tsection = ConfigurationManager.GetSection(\"roadkill\") as RoadkillSection;\r\n\t\t\telse\r\n\t\t\t\tsection = config.GetSection(\"roadkill\") as RoadkillSection;\r\n\r\n\t\t\tAdminRoleName = section.AdminRoleName;\t\t\r\n\t\t\tAppDataPath = AppDomain.CurrentDomain.BaseDirectory + @\"\\App_Data\\\";\r\n\r\n\t\t\tif (section.AttachmentsFolder.StartsWith(\"~\") && HttpContext.Current != null)\r\n\t\t\t{\r\n\t\t\t\tAttachmentsFolder = HttpContext.Current.Server.MapPath(section.AttachmentsFolder);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tAttachmentsFolder = section.AttachmentsFolder;\r\n\t\t\t}\r\n\r\n\t\t\tAttachmentsUrlPath = \"/Attachments\";\r\n\t\t\tAttachmentsRoutePath = \"Attachments\";\r\n\t\t\tCachedEnabled = section.CacheEnabled;\r\n\t\t\tCacheText = section.CacheText;\r\n\r\n\t\t\tif (config == null)\r\n\t\t\t\tConnectionString = ConfigurationManager.ConnectionStrings[section.ConnectionStringName].ConnectionString;\r\n\t\t\telse\r\n\t\t\t\tConnectionString = config.ConnectionStrings.ConnectionStrings[section.ConnectionStringName].ConnectionString;\r\n\r\n\t\t\tConnectionStringName = section.ConnectionStringName;\r\n\t\t\tCustomTokensPath = Path.Combine(AppDataPath, \"tokens.xml\");\r\n\r\n\t\t\tDatabaseType dbType;\r\n\t\t\tif (Enum.TryParse<DatabaseType>(section.DatabaseType, true, out dbType))\r\n\t\t\t\tDatabaseType = dbType;\r\n\t\t\telse\r\n\t\t\t\tDatabaseType = DatabaseType.SqlServer2005;\r\n\r\n\t\t\tEditorRoleName = section.EditorRoleName;\r\n\t\t\tIgnoreSearchIndexErrors = section.IgnoreSearchIndexErrors;\r\n\t\t\tIsPublicSite = section.IsPublicSite;\r\n\t\t\tInstalled = section.Installed;\t\t\r\n\t\t\tLdapConnectionString = section.LdapConnectionString;\r\n\t\t\tLdapUsername = section.LdapUsername;\r\n\t\t\tLdapPassword = section.LdapPassword;\r\n\t\t\tMinimumPasswordLength = 6;\r\n\t\t\tResizeImages = section.ResizeImages;\r\n\t\t\tUserManagerType = section.UserManagerType;\r\n\t\t\tUseWindowsAuthentication = section.UseWindowsAuthentication;\r\n\t\t\tVersion = typeof(RoadkillSettings).Assembly.GetName().Version.ToString();\r\n\t\t}\r\n\r\n\t\t/// <summary>\r\n\t\t/// Loads a custom app.config file for the settings, overriding the default application config file.\r\n\t\t/// </summary>\r\n\t\t/// <param name=\"filePath\">A full path to the config file.</param>\r\n\t\tpublic void LoadCustomConfigFile(string filePath)\r\n\t\t{\r\n\t\t\tExeConfigurationFileMap fileMap = new ExeConfigurationFileMap();\r\n\t\t\tfileMap.ExeConfigFilename = filePath;\r\n\t\t\tSystem.Configuration.Configuration cfg = ConfigurationManager.OpenMappedExeConfiguration(fileMap, ConfigurationUserLevel.None);\r\n\r\n\t\t\tLoad(cfg);\r\n\t\t}\r\n\t}\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":7590}]],"length":7590}
