{"ts":1353592008737,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"ï»¿using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.DirectoryServices.AccountManagement;\r\nusing System.Web;\r\nusing Roadkill.Core.Configuration;\r\n\r\nnamespace Roadkill.Core\r\n{\r\n\t/// <summary>\r\n\t/// Provides user management with Active Directory.\r\n\t/// </summary>\r\n\tpublic class ActiveDirectoryUserManager : UserManager\r\n\t{\r\n\t\t// Very simplistic caching.\r\n\t\tprivate static Dictionary<string, List<string>> _usersInGroupCache = new Dictionary<string, List<string>>();\r\n\t\tprivate string _connectionString;\r\n\t\tprivate string _username;\r\n\t\tprivate string _password;\r\n\t\tprivate List<string> _editorGroupNames;\r\n\t\tprivate List<string> _adminGroupNames;\r\n\t\tprivate string _domainName;\r\n\t\tprivate IActiveDirectoryService _service;\r\n\r\n\t\t/// <summary>\r\n\t\t/// Returns false as <see cref=\"ActiveDirectoryUserManager\"/> does not support user updates.\r\n\t\t/// </summary>\r\n\t\tpublic override bool IsReadonly\r\n\t\t{\r\n\t\t\tget\r\n\t\t\t{\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t/// <summary>\r\n\t\t/// Creates a new instance of a <see cref=\"ActiveDirectoryUserManager\"/> using the given service.\r\n\t\t/// </summary>\r\n\t\tpublic ActiveDirectoryUserManager(IConfigurationContainer configuration, IRepository repository, PageManager pageManager, string ldapConnectionString, string username, string password, string editorGroupName, string adminGroupName) :\r\n\t\t\tthis(configuration, repository, pageManager, new DefaultActiveDirectoryService(), ldapConnectionString, username, password, editorGroupName, adminGroupName)\r\n\t\t{\r\n\t\t}\r\n\r\n\t\t/// <summary>\r\n\t\t/// Initializes a new instance of the <see cref=\"ActiveDirectoryUserManager\"/> class.\r\n\t\t/// </summary>\r\n\t\t/// <param name=\"ldapConnectionString\">The LDAP connection string.</param>\r\n\t\t/// <param name=\"username\">The username to authenticate against the Active Directory with.</param>\r\n\t\t/// <param name=\"password\">The password to authenticate against the Active Directory with.</param>\r\n\t\t/// <param name=\"editorGroupName\">The name of the group for editors.</param>\r\n\t\t/// <param name=\"adminGroupName\">The name of the group for admins.</param>\r\n\t\t/// <param name=\"service\">A custom service for providing membership lookups.</param>\r\n\t\tpublic ActiveDirectoryUserManager(IConfigurationContainer configuration, IRepository repository, PageManager pageManager, \r\n\t\t\tIActiveDirectoryService service, string ldapConnectionString, string username, string password, string editorGroupName, string adminGroupName)\r\n\t\t\t: base(configuration, repository, pageManager)\r\n\t\t{\r\n\t\t\t// Some guards\r\n\t\t\tif (string.IsNullOrEmpty(ldapConnectionString))\r\n\t\t\t\tthrow new SecurityException(\"The LDAP connection string is empty\", null);\r\n\r\n\t\t\tif (string.IsNullOrEmpty(editorGroupName))\r\n\t\t\t\tthrow new SecurityException(\"The LDAP editor group name is empty\", null);\r\n\r\n\t\t\tif (string.IsNullOrEmpty(adminGroupName))\r\n\t\t\t\tthrow new SecurityException(\"The LDAP admin group name is empty\", null);\r\n\r\n\t\t\t_service = service;\r\n\t\t\t_connectionString = ldapConnectionString;\r\n\t\t\t_username = username;\r\n\t\t\t_password = password;\r\n\r\n\t\t\t// Remove the \"LDAP://\" part for the domain name, as the PrincipleContext doesn't like it.\r\n\t\t\tint length = \"ldap://\".Length;\r\n\t\t\tif (!_connectionString.ToLower().StartsWith(\"ldap://\") || _connectionString.Length < length)\r\n\t\t\t\tthrow new SecurityException(null, \"The LDAP connection string: '{0}' does not appear to be a valid LDAP. A correct connection string example is LDAP://dc=megacorp,dc=com.\", _connectionString);\r\n\r\n\t\t\t_domainName = _connectionString.Substring(length);\r\n\r\n\t\t\t//\r\n\t\t\t// Cater for multiple groups for editors and admins\r\n\t\t\t//\r\n\t\t\tstring[] groups;\r\n\t\t\tif (editorGroupName.IndexOf(\",\") != -1)\r\n\t\t\t{\r\n\t\t\t\tgroups = editorGroupName.Split(',');\r\n\t\t\t\t_editorGroupNames = new List<string>(groups);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t_editorGroupNames = new List<string>() { editorGroupName };\r\n\t\t\t}\r\n\r\n\t\t\tif (adminGroupName.IndexOf(\",\") != -1)\r\n\t\t\t{\r\n\t\t\t\tgroups = adminGroupName.Split(',');\r\n\t\t\t\t_adminGroupNames = new List<string>(groups);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t_adminGroupNames = new List<string>() { adminGroupName };\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t/// <summary>\r\n\t\t/// Retrieves a full <see cref=\"User\"/> object for the email address provided, or null if the user doesn't exist.\r\n\t\t/// </summary>\r\n\t\t/// <param name=\"email\">The username of the user to get</param>\r\n\t\t/// <returns>\r\n\t\t/// A <see cref=\"User\"/> object\r\n\t\t/// </returns>\r\n\t\tpublic override User GetUser(string email)\r\n\t\t{\r\n\t\t\treturn new User()\r\n\t\t\t{\r\n\t\t\t\tEmail = email,\r\n\t\t\t\tUsername = email,\r\n\t\t\t\tIsActivated = true,\r\n\t\t\t\tIsEditor = IsEditor(email),\r\n\t\t\t\tIsAdmin = IsAdmin(email),\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t/// <summary>\r\n\t\t/// Determines whether the specified user with the given email/username is an admin.\r\n\t\t/// </summary>\r\n\t\t/// <param name=\"email\">The email address or username of the user.</param>\r\n\t\t/// <returns>\r\n\t\t/// true if the user is an admin; false otherwise.\r\n\t\t/// </returns>\r\n\t\t/// <exception cref=\"SecurityException\">An Active Directory releated error occurred while checking the username.email.</exception>\r\n\t\tpublic override bool IsAdmin(string email)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tList<string> users = new List<string>();\r\n\t\t\t\tforeach (string group in _adminGroupNames)\r\n\t\t\t\t{\r\n\t\t\t\t\tusers.AddRange(GetUsersInGroup(group));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn users.Contains(CleanUsername(email));\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tthrow new SecurityException(ex, \"An error occurred querying IsAdmin with Active Directory\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/// <summary>\r\n\t\t/// Determines whether the specified user with the given email/username is an editor.\r\n\t\t/// </summary>\r\n\t\t/// <param name=\"email\">The email address or username of the user.</param>\r\n\t\t/// <returns>\r\n\t\t/// true if the user is an editor; false otherwise.\r\n\t\t/// </returns>\r\n\t\t/// <exception cref=\"SecurityException\">An Active Directory releated error occurred while checking the username.email.</exception>\r\n\t\tpublic override bool IsEditor(string email)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tList<string> users = new List<string>();\r\n\t\t\t\tforeach (string group in _editorGroupNames)\r\n\t\t\t\t{\r\n\t\t\t\t\tusers.AddRange(GetUsersInGroup(group));\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn users.Contains(CleanUsername(email));\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex)\r\n\t\t\t{\r\n\t\t\t\tthrow new SecurityException(ex, \"An error occurred querying IsEditor with Active Directory\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/// <summary>\r\n\t\t/// Lists all admins in the system.\r\n\t\t/// </summary>\r\n\t\t/// <returns>\r\n\t\t/// A list of email/usernames who belong to the admin group/security group.\r\n\t\t/// </returns>\r\n\t\tpublic override IEnumerable<UserSummary> ListAdmins()\r\n\t\t{\r\n\t\t\tList<string> usernames = new List<string>();\r\n\t\t\tforeach (string group in _adminGroupNames)\r\n\t\t\t{\r\n\t\t\t\tusernames.AddRange(GetUsersInGroup(group));\r\n\t\t\t}\r\n\r\n\t\t\tList<UserSummary> list = new List<UserSummary>();\r\n\t\t\tforeach (string editor in usernames)\r\n\t\t\t{\r\n\t\t\t\tlist.Add(new UserSummary() { ExistingUsername = editor, ExistingEmail = editor });\r\n\t\t\t}\r\n\r\n\t\t\treturn list;\r\n\t\t}\r\n\r\n\t\t/// <summary>\r\n\t\t/// Lists all editors in the system.\r\n\t\t/// </summary>\r\n\t\t/// <returns>\r\n\t\t/// A list of email/usernames wwho belong to the editor group/security group.\r\n\t\t/// </returns>\r\n\t\tpublic override IEnumerable<UserSummary> ListEditors()\r\n\t\t{\r\n\t\t\tList<string> usernames = new List<string>();\r\n\t\t\tforeach (string group in _editorGroupNames)\r\n\t\t\t{\r\n\t\t\t\tusernames.AddRange(GetUsersInGroup(group));\r\n\t\t\t}\r\n\r\n\t\t\tList<UserSummary> list = new List<UserSummary>();\r\n\t\t\tforeach (string editor in usernames)\r\n\t\t\t{\r\n\t\t\t\tlist.Add(new UserSummary() { ExistingUsername = editor, ExistingEmail = editor });\r\n\t\t\t}\r\n\r\n\t\t\treturn list;\r\n\t\t}\r\n\r\n\t\t/// <summary>\r\n\t\t/// Gets the current <see cref=\"WindowsIdentity\"/> username.\r\n\t\t/// </summary>\r\n\t\tpublic override string GetLoggedInUserName(HttpContextBase context)\r\n\t\t{\r\n\t\t\treturn context.Request.LogonUserIdentity.Name;\r\n\t\t}\r\n\r\n\t\t/// <summary>\r\n\t\t/// Lowercases the username and takes the \"john\" part from \"DOMAIN\\john\".\r\n\t\t/// </summary>\r\n\t\tprivate string CleanUsername(string username)\r\n\t\t{\r\n\t\t\tint start = username.IndexOf(@\"\\\");\r\n\t\t\tif (start > 0)\r\n\t\t\t{\r\n\t\t\t\tusername = username.Substring(start + 1);\r\n\t\t\t}\r\n\r\n\t\t\tusername = username.ToLower();\r\n\t\t\treturn username;\r\n\t\t}\r\n\r\n\t\t/// <summary>\r\n\t\t/// Retrieve listing of all users in a specified group.\r\n\t\t/// </summary>\r\n\t\tprivate List<string> GetUsersInGroup(string groupName)\r\n\t\t{\r\n\t\t\tif (!_usersInGroupCache.ContainsKey(groupName))\r\n\t\t\t{\r\n\t\t\t\tList<string> results = new List<string>();\r\n\r\n\t\t\t\t// Ensure they're null if they're empty\r\n\t\t\t\tif (_username == \"\")\r\n\t\t\t\t{\r\n\t\t\t\t\t_username = null;\r\n\t\t\t\t\t_password = null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tforeach (IRoadKillPrincipal principle in _service.GetMembers(_domainName, _username, _password, groupName))\r\n\t\t\t\t{\r\n\t\t\t\t\tresults.Add(principle.SamAccountName.ToLower());\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_usersInGroupCache.Add(groupName, results);\r\n\t\t\t}\r\n\r\n\t\t\treturn _usersInGroupCache[groupName];\r\n\t\t}\r\n\r\n\t\t#region Not implemented methods\r\n\t\t/// <exception cref=\"NotImplementedException\">This feature is not available with the <see cref=\"ActiveDirectoryUserManager\"/></exception>\r\n\t\tpublic override bool ActivateUser(string activationKey)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\t/// <exception cref=\"NotImplementedException\">This feature is not available with the <see cref=\"ActiveDirectoryUserManager\"/></exception>\r\n\t\tpublic override bool AddUser(string email, string username, string password, bool isAdmin, bool isEditor)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\t/// <exception cref=\"NotImplementedException\">This feature is not available with the <see cref=\"ActiveDirectoryUserManager\"/></exception>\r\n\t\tpublic override bool Authenticate(string email, string password)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\t/// <exception cref=\"NotImplementedException\">This feature is not available with the <see cref=\"ActiveDirectoryUserManager\"/></exception>\r\n\t\tpublic override void ChangePassword(string email, string newPassword)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\t/// <exception cref=\"NotImplementedException\">This feature is not available with the <see cref=\"ActiveDirectoryUserManager\"/></exception>\r\n\t\tpublic override bool ChangePassword(string email, string oldPassword, string newPassword)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\t/// <exception cref=\"NotImplementedException\">This feature is not available with the <see cref=\"ActiveDirectoryUserManager\"/></exception>\r\n\t\tpublic override bool UpdateUser(UserSummary summary)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\t/// <exception cref=\"NotImplementedException\">This feature is not available with the <see cref=\"ActiveDirectoryUserManager\"/></exception>\r\n\t\tpublic override bool DeleteUser(string email)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\t/// <exception cref=\"NotImplementedException\">This feature is not available with the <see cref=\"ActiveDirectoryUserManager\"/></exception>\r\n\t\tpublic override User GetUserById(Guid id)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\t/// <exception cref=\"NotImplementedException\">This feature is not available with the <see cref=\"ActiveDirectoryUserManager\"/></exception>\r\n\t\tpublic override User GetUserByResetKey(string resetKey)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\t/// <exception cref=\"NotImplementedException\">This feature is not available with the <see cref=\"ActiveDirectoryUserManager\"/></exception>\r\n\t\tpublic override void Logout()\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\t/// <exception cref=\"NotImplementedException\">This feature is not available with the <see cref=\"ActiveDirectoryUserManager\"/></exception>\r\n\t\tpublic override string ResetPassword(string email)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\t/// <exception cref=\"NotImplementedException\">This feature is not available with the <see cref=\"ActiveDirectoryUserManager\"/></exception>\r\n\t\tpublic override void ToggleAdmin(string email)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\t/// <exception cref=\"NotImplementedException\">This feature is not available with the <see cref=\"ActiveDirectoryUserManager\"/></exception>\r\n\t\tpublic override void ToggleEditor(string email)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\t/// <exception cref=\"NotImplementedException\">This feature is not available with the <see cref=\"ActiveDirectoryUserManager\"/></exception>\r\n\t\tpublic override string Signup(UserSummary summary, Action completed)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\t/// <exception cref=\"NotImplementedException\">This feature is not available with the <see cref=\"ActiveDirectoryUserManager\"/></exception>\r\n\t\tpublic override bool UserExists(string email)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\r\n\t\t/// <exception cref=\"NotImplementedException\">This feature is not available with the <see cref=\"ActiveDirectoryUserManager\"/></exception>\r\n\t\tpublic override bool UserNameExists(string username)\r\n\t\t{\r\n\t\t\tthrow new NotImplementedException();\r\n\t\t}\r\n\t\t#endregion\r\n\t}\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":12977}]],"length":12977}
