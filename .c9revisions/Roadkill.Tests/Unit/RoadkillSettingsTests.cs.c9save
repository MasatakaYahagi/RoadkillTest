{"ts":1353592157092,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"﻿using System;\r\nusing System.Collections.Generic;\r\nusing System.Configuration;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing Moq;\r\nusing NUnit.Framework;\r\nusing Roadkill.Core;\r\nusing Roadkill.Core.Configuration;\r\nusing Roadkill.Core.Converters;\r\nusing Roadkill.Core.Domain;\r\nusing Roadkill.Tests.Integration;\r\n\r\nnamespace Roadkill.Tests.Unit\r\n{\r\n\t[TestFixture]\r\n\t[Description(\"Tests for both database and .config file settings.\")]\r\n\t[Category(\"Unit\")]\r\n\tpublic class RoadkillSettingsTests\r\n\t{\r\n\t\tprivate IConfigurationContainer _config;\r\n\r\n\t\t[SetUp]\r\n\t\tpublic void SearchSetup()\r\n\t\t{\r\n\t\t\t_config = new RoadkillSettings();\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void RoadkillSection_Properties_Have_Correct_Key_Mappings_And_Values()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\tstring configFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"Unit\", \"TestConfigs\", \"test.config\");\r\n\r\n\t\t\t// Act\r\n\t\t\tApplicationSettings appSettings = new ApplicationSettings();\r\n\t\t\tappSettings.LoadCustomConfigFile(configFilePath);\r\n\r\n\t\t\t// Assert\r\n\t\t\tAssert.That(appSettings.AdminRoleName, Is.EqualTo(\"Admin-test\"), \"AdminRoleName\");\r\n\t\t\tAssert.That(appSettings.AttachmentsFolder, Is.EqualTo(\"/Attachments-test\"), \"AttachmentsFolder\");\r\n\t\t\tAssert.That(appSettings.CachedEnabled, Is.True, \"CacheEnabled\");\r\n\t\t\tAssert.That(appSettings.CacheText, Is.True, \"CacheText\");\r\n\t\t\tAssert.That(appSettings.ConnectionStringName, Is.EqualTo(\"Roadkill-test\"), \"ConnectionStringName\");\r\n\t\t\tAssert.That(appSettings.DatabaseType, Is.EqualTo(DatabaseType.Sqlite), \"DatabaseType\");\r\n\t\t\tAssert.That(appSettings.EditorRoleName, Is.EqualTo(\"Editor-test\"), \"EditorRoleName\");\r\n\t\t\tAssert.That(appSettings.IgnoreSearchIndexErrors, Is.True, \"IgnoreSearchIndexErrors\");\r\n\t\t\tAssert.That(appSettings.Installed, Is.True, \"Installed\");\r\n\t\t\tAssert.That(appSettings.IsPublicSite, Is.False, \"IsPublicSite\");\r\n\t\t\tAssert.That(appSettings.LdapConnectionString, Is.EqualTo(\"ldapstring-test\"), \"LdapConnectionString\");\r\n\t\t\tAssert.That(appSettings.LdapPassword, Is.EqualTo(\"ldappassword-test\"), \"LdapPassword\");\r\n\t\t\tAssert.That(appSettings.LdapUsername, Is.EqualTo(\"ldapusername-test\"), \"LdapUsername\");\r\n\t\t\tAssert.That(appSettings.ResizeImages, Is.True, \"ResizeImages\");\r\n\t\t\tAssert.That(appSettings.UserManagerType, Is.EqualTo(\"SqlUserManager-test\"), \"SqlUserManager\");\r\n\t\t\tAssert.That(appSettings.UseWindowsAuthentication, Is.False, \"UseWindowsAuthentication\");\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\t[RequiresSTA]\r\n\t\tpublic void RoadkillSection_Optional_Settings_With_Missing_Values_Have_Default_Values()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\tstring configFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"Unit\", \"TestConfigs\", \"test-optional-values.config\");\r\n\r\n\t\t\t// Act\r\n\t\t\tApplicationSettings appSettings = new ApplicationSettings();\r\n\t\t\tappSettings.LoadCustomConfigFile(configFilePath);\r\n\r\n\t\t\t// Assert\r\n\t\t\tAssert.That(appSettings.DatabaseType, Is.EqualTo(DatabaseType.SqlServer2005), \"DatabaseType\");\r\n\t\t\tAssert.That(appSettings.IgnoreSearchIndexErrors, Is.False, \"IgnoreSearchIndexErrors\");\r\n\t\t\tAssert.That(appSettings.IsPublicSite, Is.True, \"IsPublicSite\");\r\n\t\t\tAssert.That(appSettings.LdapConnectionString, Is.EqualTo(\"\"), \"LdapConnectionString\");\r\n\t\t\tAssert.That(appSettings.LdapPassword, Is.EqualTo(\"\"), \"LdapPassword\");\r\n\t\t\tAssert.That(appSettings.LdapUsername, Is.EqualTo(\"\"), \"LdapUsername\");\r\n\t\t\tAssert.That(appSettings.ResizeImages, Is.True, \"ResizeImages\");\r\n\t\t\tAssert.That(appSettings.UserManagerType, Is.EqualTo(\"\"), \"SqlUserManager\");\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void Connection_Setting_Should_Find_Connection_Value()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\tstring configFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"Unit\", \"TestConfigs\", \"test.config\");\r\n\r\n\t\t\t// Act\r\n\t\t\tApplicationSettings appSettings = new ApplicationSettings();\r\n\t\t\tappSettings.LoadCustomConfigFile(configFilePath);\r\n\r\n\t\t\t// Assert\r\n\t\t\tAssert.That(appSettings.ConnectionString, Is.EqualTo(\"connectionstring-test\"), \"ConnectionStringName\");\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\t[ExpectedException(typeof(ConfigurationErrorsException))]\r\n\t\tpublic void RoadkillSection_Missing_Values_Throw_Exception()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\tstring configFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"Unit\", \"TestConfigs\", \"test-missing-values.config\");\r\n\r\n\t\t\t// Act\r\n\t\t\tApplicationSettings appSettings = new ApplicationSettings();\r\n\t\t\tappSettings.LoadCustomConfigFile(configFilePath);\r\n\r\n\t\t\t// Assert (call the Current method to load the config)\r\n\t\t\tvar x = appSettings.ConnectionStringName;\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void SettingsManager_Should_Save_Settings()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\tSitePreferences preferences = new SitePreferences()\r\n\t\t\t{\r\n\t\t\t\tId = SitePreferences.ConfigurationId,\r\n\t\t\t\tAllowedFileTypes = \"jpg, png, gif\",\r\n\t\t\t\tAllowUserSignup = true,\r\n\t\t\t\tIsRecaptchaEnabled = true,\r\n\t\t\t\tMarkupType = \"markuptype\",\r\n\t\t\t\tRecaptchaPrivateKey = \"privatekey\",\r\n\t\t\t\tRecaptchaPublicKey = \"publickey\",\r\n\t\t\t\tSiteName = \"sitename\",\r\n\t\t\t\tSiteUrl = \"siteurl\",\r\n\t\t\t\tTheme = \"theme\",\r\n\t\t\t};\r\n\t\t\tSettingsSummary validConfigSettings = new SettingsSummary()\r\n\t\t\t{\r\n\t\t\t\tAllowedExtensions = \"jpg, png, gif\",\r\n\t\t\t\tAllowUserSignup = true,\r\n\t\t\t\tEnableRecaptcha = true,\r\n\t\t\t\tMarkupType = \"markuptype\",\r\n\t\t\t\tRecaptchaPrivateKey = \"privatekey\",\r\n\t\t\t\tRecaptchaPublicKey = \"publickey\",\r\n\t\t\t\tSiteName = \"sitename\",\r\n\t\t\t\tSiteUrl = \"siteurl\",\r\n\t\t\t\tTheme = \"theme\",\r\n\t\t\t};\r\n\r\n\t\t\tMock<IRepository> repositoryMock = new Mock<IRepository>();\r\n\t\t\trepositoryMock.Setup(x => x.SaveOrUpdate<SitePreferences>(preferences));\r\n\t\t\trepositoryMock.Setup(x => x.GetSitePreferences()).Returns(preferences);\r\n\r\n\t\t\tRoadkillApplication.SetupIoC(_config, repositoryMock.Object, null);\r\n\t\t\tSettingsManager settingsManager = new SettingsManager(_config, repositoryMock.Object);\r\n\r\n\t\t\t// Act\r\n\t\t\tsettingsManager.SaveSiteConfiguration(validConfigSettings, true);\r\n\r\n\t\t\t// Assert\r\n\t\t\trepositoryMock.Verify(x => x.SaveOrUpdate<SitePreferences>(\r\n\t\t\t\tIt.Is<SitePreferences>(s => s.Id == preferences.Id && s.MarkupType == preferences.MarkupType)\r\n\t\t\t));\r\n\t\t\tAssert.That(RoadkillSettings.Current.SitePreferences.AllowedFileTypes.Contains(\"jpg\"), \"AllowedFileTypes jpg\");\r\n\t\t\tAssert.That(RoadkillSettings.Current.SitePreferences.AllowedFileTypes.Contains(\"gif\"), \"AllowedFileTypes gif\");\r\n\t\t\tAssert.That(RoadkillSettings.Current.SitePreferences.AllowedFileTypes.Contains(\"png\"), \"AllowedFileTypes png\");\r\n\t\t\tAssert.That(RoadkillSettings.Current.SitePreferences.AllowUserSignup, Is.True, \"AllowUserSignup\");\r\n\t\t\tAssert.That(RoadkillSettings.Current.SitePreferences.IsRecaptchaEnabled, Is.True, \"IsRecaptchaEnabled\");\r\n\t\t\tAssert.That(RoadkillSettings.Current.SitePreferences.MarkupType, Is.EqualTo(\"markuptype\"), \"MarkupType\");\r\n\t\t\tAssert.That(RoadkillSettings.Current.SitePreferences.RecaptchaPrivateKey, Is.EqualTo(\"privatekey\"), \"RecaptchaPrivateKey\");\r\n\t\t\tAssert.That(RoadkillSettings.Current.SitePreferences.RecaptchaPublicKey, Is.EqualTo(\"publickey\"), \"RecaptchaPublicKey\");\r\n\t\t\tAssert.That(RoadkillSettings.Current.SitePreferences.SiteName, Is.EqualTo(\"sitename\"), \"SiteName\");\r\n\t\t\tAssert.That(RoadkillSettings.Current.SitePreferences.SiteUrl, Is.EqualTo(\"siteurl\"), \"SiteUrl\");\r\n\t\t\tAssert.That(RoadkillSettings.Current.SitePreferences.Theme, Is.EqualTo(\"theme\"), \"Theme\");\r\n\r\n\t\t\t// How can ~/ for Attachments be tested?\r\n\t\t\t// AppDataPath etc.?\r\n\t\t}\r\n\t}\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":7308}]],"length":7308}
{"contributors":[],"silentsave":false,"ts":1353592271135,"patch":[[{"diffs":[[-1,"﻿"],[0,"usin"]],"start1":0,"start2":0,"length1":5,"length2":4},{"diffs":[[0,"?\r\n\t\t}\r\n"],[1,"\t\t\r\n\t\t[Test]\r\n\t\tpublic void Custom_UserManager_Should_Load()\r\n\t\t{\r\n\t\t\tAssert.Fail();\r\n\t\t}\r\n\t\t\r\n\t\t[Test]\r\n\t\tpublic void UseWindowsAuth_Should_Load_ActiveDirectory_UserManager()\r\n\t\t{\r\n\t\t\tAssert.Fail();\r\n\t\t}\r\n\t\t\r\n\t\t[Test]\r\n\t\tpublic void Should_Use_SqlUserManager_By_Default()\r\n\t\t{\r\n\t\t\tAssert.Fail();\r\n\t\t}\r\n"],[0,"\t}\r\n}"]],"start1":7294,"start2":7294,"length1":13,"length2":316}]],"length":7610,"saved":false}
