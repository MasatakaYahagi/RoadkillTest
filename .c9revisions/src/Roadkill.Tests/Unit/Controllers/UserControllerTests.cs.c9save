{"ts":1362401273914,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"ï»¿using System;\r\nusing System.Collections.Generic;\r\nusing System.Web.Mvc;\r\nusing Moq;\r\nusing NUnit.Framework;\r\nusing Roadkill.Core;\r\nusing Roadkill.Core.Configuration;\r\nusing Roadkill.Core.Controllers;\r\n\r\nnamespace Roadkill.Tests.Unit\r\n{\r\n\t[TestFixture]\r\n\t[Category(\"Unit\")]\r\n\tpublic class UserControllerTests\r\n\t{\r\n\t\tpublic static string AdminEmail = \"admin@localhost\";\r\n\t\tpublic static string AdminUsername = \"admin\";\r\n\t\tpublic static string AdminPassword = \"password\";\r\n\r\n\t\tprivate IConfigurationContainer _config;\r\n\t\tprivate IRepository _repository;\r\n\t\tprivate Mock<UserManager> _userManager;\r\n\t\tprivate IRoadkillContext _context;\r\n\t\tprivate List<User> _users = new List<User>();\r\n\r\n\t\t[TestFixtureSetUp]\r\n\t\tpublic void Setup()\r\n\t\t{\r\n\t\t\t_config = new RoadkillSettings();\r\n\t\t\t_config.ApplicationSettings = new ApplicationSettings();\r\n\t\t\t_config.SitePreferences = new SitePreferences();\r\n\t\t\t_repository = null;\r\n\r\n\t\t\tUser dummyUser = new User() \r\n\t\t\t{ \r\n\t\t\t\tId = Guid.NewGuid(),\r\n\t\t\t\tEmail = AdminEmail, \r\n\t\t\t\tUsername = AdminUsername,\r\n\t\t\t\tPasswordResetKey = \"resetkey\", \r\n\t\t\t\tActivationKey = \"activatekey\",\r\n\t\t\t\tFirstname = \"Firstname\",\r\n\t\t\t\tLastname = \"LastnameNotSurname\"\r\n\t\t\t};\r\n\t\t\t_users.Add(dummyUser);\r\n\r\n\t\t\t_userManager = new Mock<UserManager>(_config, _repository);\r\n\t\t\t_userManager.Setup(u => u.Authenticate(AdminEmail, AdminPassword)).Returns(true).Callback(() =>\r\n\t\t\t{\r\n\t\t\t\t_context.CurrentUser = dummyUser.Id.ToString();\r\n\t\t\t});\r\n\t\t\t_userManager.Setup(s => s.ActivateUser(\"activatekey\")).Returns(true);\r\n\t\t\t_userManager.Setup(s => s.GetUserByResetKey(\"resetkey\")).Returns(_users[0]);\r\n\t\t\t_userManager.Setup(s => s.GetUserById(dummyUser.Id, It.IsAny<bool>())).Returns(dummyUser);\r\n\r\n\t\t\t_context = new RoadkillContext(_userManager.Object);\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void Activate_With_Valid_Key_Returns_View()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\tUserController userController = new UserController(_config, _userManager.Object, _context);\r\n\t\t\tuserController.SetFakeControllerContext();\r\n\r\n\t\t\t// Act\t\r\n\t\t\tActionResult result = userController.Activate(\"activatekey\");\r\n\r\n\t\t\t// Assert\r\n\t\t\tAssert.That(result, Is.TypeOf<ViewResult>());\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void Activate_With_Invalid_Key_Should_Have_Model_Error()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\tUserController userController = new UserController(_config, _userManager.Object, _context);\r\n\t\t\tuserController.SetFakeControllerContext();\r\n\r\n\t\t\t// Act\t\r\n\t\t\tActionResult result = userController.Activate(\"badkey\");\r\n\r\n\t\t\t// Assert\r\n\t\t\tAssert.That(result, Is.TypeOf<ViewResult>());\r\n\t\t\tAssert.That(userController.ModelState.Count, Is.EqualTo(1));\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void Activate_With_Empty_Key_Returns_RedirectResult()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\tUserController userController = new UserController(_config, _userManager.Object, _context);\r\n\t\t\tuserController.SetFakeControllerContext();\r\n\r\n\t\t\t// Act\t\r\n\t\t\tActionResult result = userController.Activate(\"\");\r\n\r\n\t\t\t// Assert\r\n\t\t\tAssert.That(result, Is.TypeOf<RedirectToRouteResult>());\r\n\r\n\t\t\tRedirectToRouteResult redirectResult = result as RedirectToRouteResult;\r\n\t\t\tAssert.That(redirectResult.RouteValues[\"action\"], Is.EqualTo(\"Index\"));\r\n\t\t\tAssert.That(redirectResult.RouteValues[\"controller\"], Is.EqualTo(\"Home\"));\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void CompleteResetPassword_Has_Correct_Model_And_ActionResult()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\tUserController userController = new UserController(_config, _userManager.Object, _context);\r\n\t\t\tuserController.SetFakeControllerContext();\r\n\r\n\t\t\t// Act\t\r\n\t\t\tActionResult result = userController.CompleteResetPassword(\"resetkey\");\r\n\r\n\t\t\t// Assert\r\n\t\t\tAssert.That(result, Is.TypeOf<ViewResult>());\r\n\r\n\t\t\tUserSummary summary = result.ModelFromActionResult<UserSummary>();\r\n\t\t\tUser expectedUser = _users[0];\r\n\r\n\t\t\tAssert.That(summary.Id, Is.EqualTo(expectedUser.Id));\r\n\t\t\tAssert.That(summary.NewEmail, Is.EqualTo(expectedUser.Email));\r\n\t\t\tAssert.That(summary.PasswordResetKey, Is.EqualTo(expectedUser.PasswordResetKey));\r\n\t\t\tAssert.That(summary.Firstname, Is.EqualTo(expectedUser.Firstname));\r\n\t\t\tAssert.That(summary.Lastname, Is.EqualTo(expectedUser.Lastname));\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void CompleteResetPassword_With_WindowsAuth_Enabled_Redirects()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\t_config.ApplicationSettings.UseWindowsAuthentication = true;\r\n\t\t\tUserController userController = new UserController(_config, _userManager.Object, _context);\r\n\t\t\tuserController.SetFakeControllerContext();\r\n\r\n\t\t\t// Act\t\r\n\t\t\tActionResult result = userController.CompleteResetPassword(\"resetkey\");\r\n\r\n\t\t\t// Assert\r\n\t\t\tAssert.That(result, Is.TypeOf<RedirectToRouteResult>());\r\n\r\n\t\t\tRedirectToRouteResult redirectResult = result as RedirectToRouteResult;\r\n\t\t\tAssert.That(redirectResult.RouteValues[\"action\"], Is.EqualTo(\"Index\"));\r\n\t\t\tAssert.That(redirectResult.RouteValues[\"controller\"], Is.EqualTo(\"Home\"));\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void Login_Should_Call_Authenticate_And_Redirect()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\tUserController userController = new UserController(_config, _userManager.Object, _context);\r\n\t\t\tuserController.SetFakeControllerContext();\r\n\r\n\t\t\t// Act\t\r\n\t\t\tActionResult result = userController.Login(AdminEmail, AdminPassword, \"\");\r\n\r\n\t\t\t// Assert\r\n\t\t\t_userManager.Verify(x => x.Authenticate(AdminEmail, AdminPassword));\r\n\t\t\tAssert.That(result, Is.TypeOf<RedirectToRouteResult>());\r\n\t\t\tAssert.That(userController.ModelState.Count, Is.EqualTo(0));\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void Login_With_Wrong_Email_And_Password_Should_Have_Model_Error()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\tUserController userController = new UserController(_config, _userManager.Object, _context);\r\n\t\t\tuserController.SetFakeControllerContext();\r\n\r\n\t\t\t// Act\t\r\n\t\t\tActionResult result = userController.Login(\"wrongemail\", \"wrongpassword\", \"\");\r\n\r\n\t\t\t// Assert\r\n\t\t\tAssert.That(result, Is.TypeOf<ViewResult>());\r\n\t\t\tAssert.That(userController.ModelState.Count, Is.EqualTo(1));\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void Logout_Should_Have_RedirectResult()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\tUserController userController = new UserController(_config, _userManager.Object, _context);\r\n\t\t\tuserController.SetFakeControllerContext();\r\n\r\n\t\t\t// Act\t\r\n\t\t\tActionResult result = userController.Logout();\r\n\r\n\t\t\t// Assert\r\n\t\t\tAssert.That(result, Is.TypeOf<RedirectToRouteResult>());\r\n\r\n\t\t\tRedirectToRouteResult redirectResult = result as RedirectToRouteResult;\r\n\t\t\tAssert.That(redirectResult.RouteValues[\"action\"], Is.EqualTo(\"Index\"));\r\n\t\t\tAssert.That(redirectResult.RouteValues[\"controller\"], Is.EqualTo(\"Home\"));\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void Profile_Should_Return_Correct_ActionResult_And_Model()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\tUserController userController = new UserController(_config, _userManager.Object, _context);\r\n\t\t\tuserController.SetFakeControllerContext();\r\n\r\n\t\t\t// Act\r\n\t\t\tuserController.Login(AdminEmail, AdminPassword, \"\");\r\n\t\t\tActionResult result = userController.Profile();\r\n\r\n\t\t\t// Assert\r\n\t\t\tAssert.That(result, Is.TypeOf<ViewResult>());\r\n\r\n\t\t\tUserSummary summary = result.ModelFromActionResult<UserSummary>();\r\n\t\t\tUser expectedUser = _users[0];\r\n\r\n\t\t\tAssert.That(summary.Id, Is.EqualTo(expectedUser.Id));\r\n\t\t\tAssert.That(summary.NewEmail, Is.EqualTo(expectedUser.Email));\r\n\t\t\tAssert.That(summary.PasswordResetKey, Is.EqualTo(expectedUser.PasswordResetKey));\r\n\t\t\tAssert.That(summary.Firstname, Is.EqualTo(expectedUser.Firstname));\r\n\t\t\tAssert.That(summary.Lastname, Is.EqualTo(expectedUser.Lastname));\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void Profile_Post_Should_Update_User()\r\n\t\t{\r\n\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void ResetPassword_Should_Return_ViewResult()\r\n\t\t{\r\n\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void ResetPassword_WithWindows_Auth_Enabled_Should_Return_RedirectResult()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\t_config.ApplicationSettings.UseWindowsAuthentication = true;\r\n\t\t\tUserController userController = new UserController(_config, _userManager.Object, _context);\r\n\t\t\tuserController.SetFakeControllerContext();\r\n\r\n\t\t\t// Act\t\r\n\t\t\tActionResult result = userController.Logout();\r\n\r\n\t\t\t// Assert\r\n\t\t\tAssert.That(result, Is.TypeOf<RedirectToRouteResult>());\r\n\r\n\t\t\tRedirectToRouteResult redirectResult = result as RedirectToRouteResult;\r\n\t\t\tAssert.That(redirectResult.RouteValues[\"action\"], Is.EqualTo(\"Index\"));\r\n\t\t\tAssert.That(redirectResult.RouteValues[\"controller\"], Is.EqualTo(\"Home\"));\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void ResetPassword_Post_Should_()\r\n\t\t{\r\n\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void ResendConfirmation_Post()\r\n\t\t{\r\n\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void Signup_When_LoggedIn_Should_Return_RedirectResult()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\tUserController userController = new UserController(_config, _userManager.Object, _context);\r\n\t\t\tuserController.SetFakeControllerContext();\r\n\r\n\t\t\t// Act\t\r\n\t\t\tuserController.Login(AdminEmail, AdminPassword, \"\");\r\n\t\t\tActionResult result = userController.Signup(null, null);\r\n\r\n\t\t\t// Assert\r\n\t\t\tAssert.That(result, Is.TypeOf<RedirectToRouteResult>());\r\n\r\n\t\t\tRedirectToRouteResult redirectResult = result as RedirectToRouteResult;\r\n\t\t\tAssert.That(redirectResult.RouteValues[\"action\"], Is.EqualTo(\"Index\"));\r\n\t\t\tAssert.That(redirectResult.RouteValues[\"controller\"], Is.EqualTo(\"Home\"));\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void Signup_With_WindowsAuth_Enabled_Should_Return_RedirectResult()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\t_config.SitePreferences.AllowUserSignup = true;\r\n\t\t\t_config.ApplicationSettings.UseWindowsAuthentication = true;\r\n\t\t\tUserController userController = new UserController(_config, _userManager.Object, _context);\r\n\t\t\tuserController.SetFakeControllerContext();\r\n\r\n\t\t\t// Act\t\r\n\t\t\tActionResult result = userController.Signup(null, null);\r\n\r\n\t\t\t// Assert\r\n\t\t\tAssert.That(result, Is.TypeOf<RedirectToRouteResult>());\r\n\r\n\t\t\tRedirectToRouteResult redirectResult = result as RedirectToRouteResult;\r\n\t\t\tAssert.That(redirectResult.RouteValues[\"action\"], Is.EqualTo(\"Index\"));\r\n\t\t\tAssert.That(redirectResult.RouteValues[\"controller\"], Is.EqualTo(\"Home\"));\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void Signup_With_Signups_Disabled_Should_Return_RedirectResult()\r\n\t\t{\r\n\t\t\t// Arrange\r\n\t\t\t_config.SitePreferences.AllowUserSignup = false;\r\n\t\t\tUserController userController = new UserController(_config, _userManager.Object, _context);\r\n\t\t\tuserController.SetFakeControllerContext();\r\n\r\n\t\t\t// Act\t\r\n\t\t\tActionResult result = userController.Signup(null, null);\r\n\r\n\t\t\t// Assert\r\n\t\t\tAssert.That(result, Is.TypeOf<RedirectToRouteResult>());\r\n\r\n\t\t\tRedirectToRouteResult redirectResult = result as RedirectToRouteResult;\r\n\t\t\tAssert.That(redirectResult.RouteValues[\"action\"], Is.EqualTo(\"Index\"));\r\n\t\t\tAssert.That(redirectResult.RouteValues[\"controller\"], Is.EqualTo(\"Home\"));\r\n\t\t}\r\n\r\n\t\t[Test]\r\n\t\tpublic void Signup_Should_Send_Email()\r\n\t\t{\r\n\t\t\t// Needs a refactor of the Email class, so it's turtles all the way down\r\n\t\t}\r\n\t}\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":10627}]],"length":10627}
{"contributors":[],"silentsave":false,"ts":1362411056377,"patch":[[{"diffs":[[-1,"ï»¿"],[0,"usin"]],"start1":0,"start2":0,"length1":5,"length2":4},{"diffs":[[0,"\n\t\t\t// Arrange\r\n"],[1,"\t\t\t_config.ApplicationSettings.UseWindowsAuthentication = false;\r\n"],[0,"\t\t\tUserControlle"]],"start1":6530,"start2":6530,"length1":32,"length2":98}]],"length":10692,"saved":false}
